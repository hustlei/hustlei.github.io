make 变量中的空格



1.2.3       如何定义一个空格
使用直接扩展式变量定义我们可以实现将一个前导空格定义在变量值中。一般变量值中的前导空格字符在变量引用和函数调用时被丢弃。直接展开式变量在定义时对 引用的其它变量或函数进行展开的特点，使我们可以实现在一个变量中包含前导空格并在引用此变量时对空格加以保护。像这样：

nullstring :=
space := $(nullstring) # end of the line

这里，变量“space”就正好表示一个一个空格。“space”定义的行中的注释在这里使得我们的目的更清晰（明确地描述一个空格字符比较困难），明确 的指定我们需要的是一个空格。这是一个很好地实现方式。使用变量“nullstring”标明变量值的开始，采用“#”注释来结束，中间是一个空格字符。
make对变量进行处理时变量值中尾空格是不被忽略的，因此定义一个包含一个或者多个空格的变量定义时，上边的实现就是一个简单并且非常直观的方式。但是 需要注意的是对于不包含尾空格的变量的定义，就不能随便使用几个空格之后，在同行中放置它的注释内容。这是千万需要注意的。例如下边的做法就是不正确的：

dir := /foo/bar    # directory to put the frobs in

变量“dir”的值是“/foo/bar    ”（后面有4个空格），这可能并不是你想要实现的。假如一个特定的文件以它作为路径来表示“$(dir)/file”，那么大错特错了。
这里顺便提醒大家，在书写Makefile时。注释内容推荐书写在独立的一行或者多行，这样就可以防止出现这种意外情况的发生，而且注释行独立的行书写时 也使得你的Makefile更加清晰，便于别人的预读。对于特殊的定义，比如定义包含一个或者多个空格空格的变量时进行详细地说明和注释。